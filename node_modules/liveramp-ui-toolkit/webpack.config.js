var fs = require('fs');
var webpack = require('webpack');
var path = require('path');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var WebpackPreBuildPlugin = require('pre-build-webpack');
var _ = require('underscore');
var WatchIgnorePlugin = require('webpack').WatchIgnorePlugin;

var baseConfig =  {
  module: {
    loaders: [
      {
        test: /\.jsx?$/,
        loader: 'babel-loader',
        exclude: /node_modules/,
        query: {
          presets:['react', 'es2015']
        }
      },
      {
        test: /\.css$/,
        loader: 'style-loader!css-loader'
      },
      {
        test: /\.sass$/,
        loader: ExtractTextPlugin.extract('style', 'css!sass'),
        include: [path.resolve('./sass')]
      },
      {
        test: /\.js$/,
        include: path.resolve('./node_modules'),
        loader: 'babel-loader'
      },
      {
        test: /\.(otf|ttf)$/,
        loader: 'file-loader?emitFile=false&name=../[path][name].[ext]',
        include: [path.resolve('./fonts')]
      },
      {
        test: /\.svg/,
        loader: 'lr-svg-inline',
        query: { removeSVGTagAttrs: true, idPrefix: true },
        include: [path.resolve('./images')]
      }
    ]
  },
  devtool: '#inline-source-map',
  resolve: {
    root: [__dirname + '/js/'],
    extensions: ['', '.js', '.jsx', '.hamljs']
  },
  resolveLoader: {
    root: __dirname + '/node_modules'
  }
};

var distConfig = _.extend({
  externals: {
    'react': 'react',
    'react-dom': 'react-dom',
    'react-addons-css-transition-group': 'react-addons-css-transition-group',
    'moment': 'moment',
    'numeral': 'numeral',
    'underscore': 'underscore'
  },
  entry: {
    ui_toolkit: path.resolve('js/ui_toolkit.js')
  },
  output: {
    path: __dirname,
    filename: 'ui_toolkit.js',
    library: 'ui_toolkit',
    libraryTarget: 'commonjs2'
  },
  plugins: [
    new ExtractTextPlugin('ui_toolkit.css'),
    new webpack.ProvidePlugin({
      _: 'underscore',
      React: 'react',
      ReactDOM: 'react-dom',
      cn: 'classnames'
    }),
    new WebpackPreBuildPlugin((stats) => {
      var icons = fs.readdirSync('./images').filter((file) => { return file.endsWith('.svg'); });
      fs.writeFileSync('./js/components/icons.jsx',
        'const Icons = ' +
        JSON.stringify(icons) +
        '; export default Icons;'
      );
    }),
    new WatchIgnorePlugin([/js\/components\/icons\.jsx/])
  ]
}, baseConfig);

var docsConfig = _.extend({
  entry: {
    main: path.resolve('js/main.jsx'),
    sandbox: path.resolve('js/sandbox.jsx')
  },
  output: {
    path: require('path').resolve('./js'),
    filename: '[name].bundle.js'
  },
  plugins: [
    new ExtractTextPlugin('../docs.css'),
    new webpack.ProvidePlugin({
      _: 'underscore',
      React: 'react',
      ReactDOM: 'react-dom',
      cn: 'classnames'
    })
  ]
}, baseConfig);
docsConfig.module.loaders[2].include = [path.resolve('./')];

module.exports = [distConfig, docsConfig];
