import UiHeader from './uiHeader.jsx';
import UiTable from './uiTable.jsx';
import UiIcon from './uiIcon.jsx';

import { docs as UiTitleDocs } from '../components/uiTitle.jsx'
import { docs as UiHeaderDocs } from '../components/uiHeader.jsx'
import { docs as UiInputDocs } from '../components/uiInput.jsx'
import { docs as UiIconDocs } from '../components/uiIcon.jsx'
import { docs as UiSearchDocs } from '../components/uiSearch.jsx'
import { docs as UiSelectDocs } from '../components/uiSelect.jsx'
import { docs as UiLabelDocs } from '../components/uiLabel.jsx'
import { docs as UiCheckboxDocs } from '../components/uiCheckbox.jsx'
import { docs as UiRadioButtonDocs } from '../components/uiRadioButton.jsx'
import { docs as UiRadioButtonGroupDocs } from '../components/uiRadioButtonGroup.jsx'
import { docs as UiSliderDocs } from '../components/uiSlider.jsx'
import { docs as UiDropdownDocs } from '../components/uiDropdown.jsx'
import { docs as UiFilterGroupDocs } from '../components/uiFilterGroup.jsx'
import { docs as UiCollapseDocs } from '../components/uiCollapse.jsx'
import { docs as UiTabbedViewDocs } from '../components/uiTabbedView.jsx'
import { docs as UiAlertDocs } from '../components/uiAlert.jsx'
import { docs as UiProgressMeterDocs } from '../components/uiProgressMeter.jsx'
import { docs as UiLoadingComponentDocs } from '../components/uiLoadingComponent.jsx'
import { docs as UiIdentifierSelectDocs } from '../components/uiIdentifierSelect.jsx'

// User passes in component
// User passes in function to hide docs

const docs = {
  UiTitle: UiTitleDocs,
  UiHeader: UiHeaderDocs,
  UiInput: UiInputDocs,
  UiIcon: UiIconDocs,
  UiSearch: UiSearchDocs,
  UiSelect: UiSelectDocs,
  UiLabel: UiLabelDocs,
  UiCheckbox: UiCheckboxDocs,
  UiRadioButton: UiRadioButtonDocs,
  UiRadioButtonGroup: UiRadioButtonGroupDocs,
  UiSlider: UiSliderDocs,
  UiDropdown: UiDropdownDocs,
  UiFilterGroup: UiFilterGroupDocs,
  UiCollapse: UiCollapseDocs,
  UiTabbedView: UiTabbedViewDocs,
  UiAlert: UiAlertDocs,
  UiProgressMeter: UiProgressMeterDocs,
  UiLoadingComponent: UiLoadingComponentDocs,
  UiIdentifierSelect: UiIdentifierSelectDocs,
}

const elementKeyMap = {
  title: {
    columnName: "Title",
    sortable: false,
    width: 4
  },
  required: {
    columnName: "Required",
    sortable: false,
    width: 2,
    display: (required) => {
      if (required === undefined) {
        return (
          <UiIcon
            dimensions={[18, 18]}
            icon="ellipses"
            color="white" />
        );
      } else if (required) {
        return (
          <UiIcon
            dimensions={[18, 18]}
            icon="check"
            color="base-green" />
        );
      } else {
        return (
          <UiIcon
            dimensions={[18, 18]}
            icon="cancel"
            color="alert-red" />
        );
      }
    }
  },
  type: {
    columnName: "Type",
    sortable: false,
    width: 3
  },
  description: {
    columnName: "Description",
    sortable: false,
    width: 1
  },
}

const childComponent = (element) => {
  return (
    <p style={{lineHeight: "20px"}}>{element.description}</p>
  )
}

const UiDocsDetail = React.createClass({
  getInitialState() {
    return ({
      expandedRows: []
    })
  },

  componentWillReceiveProps() {
    this.setState({
      expandedRows: []
    });
  },

  render() {
    const componentDetails = docs[this.props.component];

    var propDetails = componentDetails.propDetails;
    _.each(Object.keys(propDetails), (propName, index) => {
      propDetails[propName]['id'] = index;
    })

    return (
      <div>
        <UiHeader textTitle={componentDetails.title} rightSideContent={<div style={{cursor: "pointer"}}><UiIcon onClick={this.props.handleChange} icon="cancel" color="white" dimensions={[20,20]} /></div>}/>
        <UiTable
          title={"Prop details"}
          hideSearch={true}
          hideFilters={true}
          hideScrollToTop={true}
          elementName={"prop"}
          elementKeyMap={elementKeyMap}
          totalRows={propDetails.length}
          hasMoreElements={false}
          handleShowHideColumn={() => {}}
          elements={propDetails}
          totalElements={propDetails.length}
          initialFetchComplete={true}
          expandedRows={this.state.expandedRows}
          toggleChildren={this.toggleChildren}
          haveChildren={true}
          childComponent={childComponent}
          hideDetail={true}
          columnsToShow={['title', 'required', 'type']}
          columnOrder={['title', 'required', 'type', 'description']}
          />
      </div>
    )
  },

  toggleChildren (id) {
    var expandedRows = this.state.expandedRows;
    if (!(_.contains(this.state.expandedRows, id))) {
      expandedRows.push(id);
    } else {
      var idx = _.indexOf(expandedRows, id);
      expandedRows.splice(idx, 1);
    }
    this.setState({
      expandedRows: expandedRows
    });
  }
})

export default UiDocsDetail;
