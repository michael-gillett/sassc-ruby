import UiIcon from 'components/uiIcon';

const docs = {
  title: "UiSplitButton",
  propDetails: [
    { title: "label",
      required: true,
      type: "string",
      description: "The label of the button." },
    { title: "handleButtonClick",
      required: true,
      type: "function",
      description: "onClick function for the main button." },
    { title: "dropDownOptions",
      required: true,
      type: "array",
      description: "Array of the options for the dropdown. An element can be a string (title of the menu option) or an object with fields text, value, and handleChange. handleChange is a function that takes text and value as arguments." },
    { title: "handleChangeDefault",
      required: false,
      type: "function",
      description: "Default function called when a dropdown option does not have a handleChange function." }
  ]
}
/* User provides:
  * Props:
  *  label: label of the button
  *  handleButtonClick: onClick function for the button
  *  dropDownOptions: array of strings and/or hashes for the dropdown
  *    - hashes of the form: { "text" (required), "value" (optional string),
  *      "handleChange" (optional function) }
  *
  *    for example:
  *    const dropDownOptions = [ 'a',
  *                      { text: 'b', value: 'b-value' },
  *                      { text: 'c', handleChange: x => console.log(x + ' -- custom callback') }
  *                    ];
  *  handleChangeDefault: function (required when one or more options does not
  *    have a "handleChange" function, accepts text and the option value as arguments)
*/

function UiSplitButtonMenuItem(props) {
  const { className, optionValue, optionOnClick, menuText, key, toggleMenu } = props;

  function optionClicked() {
    toggleMenu();
    return optionOnClick(menuText, optionValue);
  }

  return (
    <div className={className} key={key} optionValue={optionValue} onClick={optionClicked}>
      {menuText}
    </div>
  );
}

const UiSplitButton = React.createClass({
  getInitialState() {
    return { open: false };
  },

  render() {
    const { label, handleButtonClick, dropDownOptions, handleChangeDefault } = this.props;
    let menu;
    let menuItems;
    let caretIcon;

    if (this.state.open) {
      caretIcon = 'caret-up';
      let menuText;
      let optionOnClick;
      let optionValue;

      menuItems = _.map(dropDownOptions, option => {
        menuText = option.text ? option.text : option;
        optionValue = option.value;
        optionOnClick = option.handleChange ? option.handleChange : handleChangeDefault;

        return (
          <UiSplitButtonMenuItem
            key={menuText}
            className="lr-ui-split-button-menu-option"
            optionValue={optionValue}
            optionOnClick={optionOnClick}
            toggleMenu={this.toggleMenu}
            menuText={menuText}
          />
        );
      });

      menu = (
        <div className="lr-ui-split-button-menu">
            {menuItems}
        </div>
      );
    } else {
      caretIcon = 'caret-down';
    }

    return (
      <div className="lr-ui-split-button-container" onMouseLeave={this.closeOnMouseLeave}>
        <div className="lr-ui-split-button-subcontainer">
          <div className="button lr-ui-split-button" onClick={handleButtonClick}>
            {label}
          </div>
          <div className="lr-ui-split-button-line-container">
            <div className="lr-ui-split-button-line" />
          </div>
          <div className="button lr-ui-split-dropdown-button" onClick={this.toggleMenu}>
            <UiIcon icon={caretIcon} dimensions={[15, 15]} color='white' />
          </div>
        </div>
        {menu}
      </div>
    );
  },

  closeOnMouseLeave () {
    if (this.state.open) {
      this.toggleMenu();
    }
  },

  toggleMenu() {
    this.setState({ open: !this.state.open });
  },
});

export default UiSplitButton;
