import Select from 'react-select';
import UiIcon from './uiIcon.jsx';

const docs = {
  title: "UiSelect",
  propDetails: [
    { title: "selectOptions",
      required: true,
      type: "string",
      description: "A list of option hashes, formatted like [ { label: 'Option1', value: 1 }, { ... } ]. If you want to be able to delete options, but want a specific option to not be deleted, add disableDelete: true to the option." },
    { title: "selected",
      required: true,
      type: "integer or array",
      description: "A selected value, or an array of selected values if a multi-select. WARNING: Due to a bug in react-select, a value of 0 will result in broken styles on UiSelect." },
    { title: "handleChange",
      required: true,
      type: "function",
      description: "a function that receives selected values on change to update the parent. The function receives: selectValue(number | string), selectedArray(Object[]). If single select, the function will take a number and an array: the array will contain the selected object with structure { label: 'Option1', value: 1 }. The function should be able to handle an empty array or null selectValue. If multi select, the function will take a string and an array. The function should be able to handle selectValue with an empty string when no values are selected a string that represents the value selected when one value is selected. If multiple values are selected, the function will receive a string consisting of the selected values separated by commas if allowCreate is true, then this string will have a string value at the end for the 'value' of the newly created value. In this case, you will have to create a new value in the selectOptions array. When a string value is passed the selectedArray will contain the selected values in the format they were passed to options, ie. [ { label: 'Option1', value: 1 }, { ... } ]. If allowCreate is true, the created options will be pushed to the end of the array with three keys value: the string of user-entered text label: also the string of user-entered text create: true." },
    { title: "label",
      required: false,
      type: "string",
      description: "A label for the select field." },
    { title: "placeholder",
      required: false,
      type: "string",
      description: "A placeholder for the select field when empty." },
    { title: "isMulti",
      required: false,
      type: "boolean",
      description: "Whether or not the select is a multi select." },
    { title: "allowCreate",
      required: false,
      type: "boolean",
      description: "Whether or not a user can create options." },
    { title: "clearable",
      required: false,
      type: "boolean",
      description: "Whether the select is clearable." },
    { title: "arrowOnHover",
      required: false,
      type: "boolean",
      description: "Whether the arrow for the select dropdown should show only on hover." },
    { title: "canDelete",
      required: false,
      type: "boolean",
      description: "Whether or not a user can delete options." },
    { title: "handleDelete",
      required: false,
      type: "function",
      description: "Function to handle deleting an option, takes in the value of the option to be deleted." },
    { title: "fixedWidth",
      required: false,
      type: "boolean",
      description: "Whether a select form is fixed width (204px)." }
  ]
}

export default function UiSelect(props) {
  // User must pass in:
  // - selected      : integer or array : a selected value, or an array of selected values if a multi-select
  //    + WARNING: Due to a bug in react-select, a value of 0 will result in broken styles on UiSelect
  // - handleChange  : function         : a function that receives selected values on change to update the parent
  //    + receives: selectValue(number | string), selectedArray(Object[])
  //    + if single select, the function will take a number and an array:
  //        -- the array will contain the selected object with structure { label: 'Option1', value: 1 }
  //        -- the function should be able to handle an empty array or null selectValue
  //    + if multi select, the function will take a string and an array
  //        -- the function should be able to handle selectValue with
  //           ++ an empty string when no values are selected
  //           ++ a string that represents the value selected when one value is selected
  //           ++ if multiple values are selected, the function will receive a string consisting of the selected values separated by commas
  //               -- if allowCreate is true, then this string will have a string value at the end for the 'value' of the newly created value
  //                   ++ In this case, you will have to create a new value in the selectOptions array when a string value is passed
  //        -- the selectedArray will contain the selected values in the format they were passed to options, ie. [ { label: 'Option1', value: 1 }, { ... } ]
  //            ++ if allowCreate is true, the created options will be pushed to the end of the array with three keys
  //                -- value: the string of user-entered text
  //                -- label: also the string of user-entered text
  //                -- create: true
  // User may pass in:
  // - label         : string           : a label for the select field
  // - selectOptions : array            : a list of option hashes, formatted like [ { label: 'Option1', value: 1 }, { ... } ]
  //    + If you want to be able to delete options, but want a specific option to not be deleted,
  //      add {disableDelete: true} to the specific option
  // - placeholder   : string           : placeholder text to show when no value is selected
  // - isMulti       : boolean          : whether the input is a multi-select
  // - allowCreate   : boolean          : whether user can create elements that aren't in the options already
  // - clearable     : boolean          : whether the select has a button to clear all selections
  // - arrowOnHover  : boolean          : whether we show the arrow on hover
  // - canDelete     : boolean          : whether an option can be deleted
  // - handleDelete  : function         : if canDelete is true, a function that gets called to delete the option from the selectOptions
  // - fixedWidth    : boolean          : whether a select form is fixed width (204px)

  const { label, disabled, selected, selectOptions, placeholder, isMulti, arrowOnHover, allowCreate, handleChange, clearable, canDelete, handleDelete, fixedwidth=false } = props;

  function optionRenderer(option) {
    if ( _.has(option, 'disableDelete') && option.disableDelete === true ) {
      return (
        <div>
          {option.label}
        </div>
      );
    } else {
      return (
        <div>
          {option.label}
          <div
            className="lr-ui-select-clear"
            onMouseDown={(e) => { e.stopPropagation(); e.preventDefault(); }}
            onMouseUp={(e) => { e.stopPropagation(); e.preventDefault(); }}
            onClick={(e) => { e.stopPropagation(); e.preventDefault(); handleDelete(option.value);}}>
            <UiIcon
              color="sidebar-dark"
              icon='clear'
              dimensions={[20, 20]}
              />
          </div>
        </div>
      );
    }
  };

  return (
    <div className="lr-ui-select">
      {label ? <div className="lr-ui-select-label">{label}</div> : null}
      <Select
        className={(arrowOnHover === true ? "arrow-on-hover" : "") + (fixedwidth === true ? " fixedwidth" : "")}
        value={selected}
        addLabelText={'Click to Add "{label}"'}
        openOnFocus={true}
        disabled={disabled === true}
        options={selectOptions}
        placeholder={placeholder}
        multi={allowCreate || isMulti}
        allowCreate={allowCreate === true}
        onChange={handleChange}
        clearable={clearable !== false}
        optionRenderer={canDelete ? optionRenderer : undefined}
        />
    </div>
  );
};

export { docs };
