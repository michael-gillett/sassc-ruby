import ReactTooltip from 'react-tooltip';

const docs = {
  title: "UiInput",
  propDetails: [
    { title: "inputValue",
      required: true,
      type: "string",
      description: "The value for the text field." },
    { title: "handleChange",
      required: true,
      type: "function",
      description: "A function to update the state of the parent component that takes in the event of the change." },
    { title: "placeholder",
      required: false,
      type: "string",
      description: "An optional placeholder value for the input field." },
    { title: "label",
      required: false,
      type: "string",
      description: "A label for the text field." },
    { title: "tooltipText",
      required: false,
      type: "string",
      description: "What to display in the react tooltip." },
    { title: "tooltipId",
      required: false,
      type: "integer",
      description: "A unique element id for the tooltip to prevent conflicts" },
    { title: "tooltipEffect",
      required: false,
      type: "string",
      description: "'solid' or 'float' (defaults to 'solid')." },
    { title: "valid",
      required: false,
      type: "boolean",
      description: "Whether or not the input is `valid` - invalid inputs have red underlines." },
    { title: "labelShift",
      required: false,
      type: "boolean",
      description: "Dictates the behavior of the label. If true, the label begins as a placeholder and moves to a label on focus." },
    { title: "handleEnter",
      required: false,
      type: "function",
      description: "A function to handle the user pressing enter. Takes in the event of the key press." },
    { title: "handleBlur",
      required: false,
      type: "function",
      description: "A function that handles the user focusing outside of the search field." },
    { title: "size",
      required: false,
      type: "integer",
      description: "A number that sets the width of the input field in characters." },
    { title: "formText",
      required: false,
      type: "boolean",
      description: "Whether or not this input is meant for a form (i.e. has a persistent underline.)" },
    { title: "disabled",
      required: false,
      type: "boolean",
      description: "Whether or not this input is disabled." },
    { title: "isPassword",
      required: false,
      type: "boolean",
      description: "Whether or not this input is of type password (defaults to false)." },
    { title: "customAttributes",
      required: false,
      type: "object",
      description: "Allows for passing custom attributes as javascript object." },
    { title: "tooltipOnOverflow",
      required: false,
      type: "boolean",
      description: "Whether or not to tooltip only when the input is overflowing.  If 'true', 'tooltipId' is required and tooltip content will be 'tooltipText'." }
  ]
}

export default function UiInput(props) {
  // User must pass in:
  //  - inputValue    : string   : the value of the text field
  //  - handleChange  : function : updates state in the parent component that takes in the change event
  // User may pass in:
  //  - placeholder  : string   : placeholder value for the input field when it's empty
  //  - disabled     : boolean  : a boolean telling whether or not the input should be disabled (defaults to false)
  //  - label        : string   : a label for the text field
  //  - tooltipText  : string   : what to display in the react tooltip
  //  - tooltipId    : string   : a unique element id for the tooltip to prevent conflicts
  //  - tooltipEffect: string   : 'solid' or 'float' (defaults to 'solid')
  //  - valid        : boolean  : a boolean telling whether or not the input is valid
  //  - labelShift   : boolean  : a boolean telling whether the behavior should change to placeholder shifting into label
  //  - handleEnter  : function : a function that handles the user pressing 'enter' in the search field
  //  - handleBlur   : function : a function that handles the user focusing outside of the search field
  //  - size         : integer  : a number that sets the width of the input field in characters
  //  - formtext     : boolean  : a boolean telling whether or not this input is meant for a form (i.e. has a persistent underline. This is just a styling change)
  //  - isPassword   : boolean  : a boolean denoting whether or not this input is of type password (defaults to false)

  const { label, inputValue, placeholder, tooltipText, tooltipId, tooltipEffect='solid', valid, labelShift, handleChange, handleEnter, handleBlur, size , formtext=false, disabled, isPassword=false, customAttributes = {}, tooltipOnOverflow=false} = props;

  if (labelShift && placeholder) {
    console.warn("Placeholder text " + placeholder + " will not be used with shift functionality");
  };

  // Based on the value of the "valid" prop, the input field will have two states:
  // "lr-ui-input-input valid" corresponds to the inputValue being valid.
  // "lr-ui-input-input invalid" corresponds to the inputValue being invalid.
  // Therefore, all validations must be done in the parent component

  const keyDown = function(e) {
    if (e.keyCode === 13 || e.which === 13) {
      if(handleEnter) {
        handleEnter(e);
      }
    }
  };
  // prevent inifinite loops in edge cases. see CJ if you want more details
  const debouncedBlur = (blurFn) => {
    let canBeCalled = true;
    return () => {
      if (canBeCalled) {
        blurFn();
        canBeCalled = false;
        setTimeout(() => {canBeCalled = true}, 0)
      }
    }
  };

  const getInputClasses = () => {
    let className = "lr-ui-input-input";
    let populated = inputValue && inputValue.length > 0;
    className += (valid ? " valid" : " invalid");
    className += (populated ? " populated" : "");
    className += (size ? " set-size" : "");
    className += (formtext ? " formtext" : "");
    className += (disabled ? " disabled" : "");
    return (className);
  };

  const createReactTooltipComponent = () => {
    return <ReactTooltip id={tooltipId} place="top" type="dark" effect={tooltipEffect} />
  };

  const getTooltip = () => {
    if (tooltipOnOverflow) {
      // Find the input we need to check overflow for
      const query = `[data-for=${tooltipId}]`;
      var elem = document.querySelector(query);

      // Overflowing when scrollWidth is greater than the offsetWidth
      if (elem && elem.offsetWidth < elem.scrollWidth) {
        return createReactTooltipComponent();
      }
    } else if (tooltipText) {
      return createReactTooltipComponent();
    } else {
      return null
    }
  };

  return (
    <div className={labelShift ? "lr-ui-input labelShift" : "lr-ui-input"} id="lr-ui-input">
      { label && !labelShift ? (<div className="lr-ui-input-label">{label}</div>) : null }
      <input
        {...customAttributes}
        type={isPassword ? 'password' : 'text'}
        id="lr-ui-input-input"
        className={getInputClasses()}
        placeholder={placeholder}
        data-tip={tooltipText}
        data-for={tooltipId}
        size={size ? size : null}
        value={inputValue}
        placeholder={labelShift ? null : placeholder}
        onChange={handleChange}
        onKeyDown={keyDown}
        onBlur={handleBlur ? debouncedBlur(handleBlur) : null}
        disabled={!!disabled}
      />
      {labelShift ? (<div className="lr-ui-input-label labelShift" htmlFor="lr-ui-input-input">{label}</div>) : null}
      {getTooltip()}
    </div>
  );
};

export { docs };
