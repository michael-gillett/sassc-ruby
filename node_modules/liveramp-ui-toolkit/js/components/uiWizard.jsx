const docs = {
  title: "UiWizard",
  propDetails: [
    { title: "steps",
      required: true,
      type: "array",
      description: `Array of js objects containing step information.
      Each step must have: name, component.
      Optional attributes for each step are: nextCallback, canProceed, canRecede.` },
    { title: "showNavigation",
      required: false,
      type: "boolean",
      description: "A function to dictate whether or not to show UiWizardControls. Default is true." },
    { title: "cancel",
      required: false,
      type: "function",
      description: "A function to handle cancel in the UiWizardControls. Required if showNavigation is true." },
    { title: "start",
      required: false,
      type: "integer",
      description: "Optional starting step" }
  ]
}

import UiProgressMeter from './uiProgressMeter';
import UiWizardControls from './uiWizardControls';
import ReactCSSTransitionGroup from 'react-addons-css-transition-group';

const UiWizard = React.createClass({

  getDefaultProps() {
    return {
      showNavigation: true
    };
  },

  getInitialState () {
    return {
      compState: this.props.start || 0
    };
  },

  next(currentStep) {
    currentStep.nextCallback && currentStep.nextCallback();
    if (this.state.compState < this.props.steps.length) {
      this.setState({ compState: this.state.compState + 1 })
    }
  },

  previous() {
    if (this.state.compState > 0) {
      this.setState({ compState: this.state.compState - 1 })
    }
  },

  showNext(currentStep) {
    if (currentStep > 0 && currentStep != (this.props.steps.length - 1)){
      return true;
    } else if (currentStep == 0) {
      return true;
    } else {
      return false;
    }
  },

  showPrevious(currentStep) {
    if (currentStep > 0 && currentStep != (this.props.steps.length - 1)){
      return true;
    } else if (currentStep == 0) {
      return false;
    } else {
      return true;
    }
  },

  render() {

    const currentStep = this.props.steps[this.state.compState];
    const customButton = currentStep.customButton;
    const nextDisabled = currentStep.canProceed ? !currentStep.canProceed() : false;
    const previousDisabled = currentStep.canRecede ? !currentStep.canRecede() : false;
    // TODO jedgcomb: make onclick next callback thing less shitty
    return (
      <div>
        <div className='wizard-tracker'>
          <ol className='progtrckr'>
            {this.renderSteps()}
          </ol>
        </div>
        <div className='wizard-body'>
          <ReactCSSTransitionGroup
            transitionName='wizard-step'
            transitionAppear={true}
            transitionAppearTimeout={1000}
            transitionEnterTimeout={1000}
            transitionLeaveTimeout={1000}>
            <div key={this.state.compState}>{currentStep.component}</div>
          </ReactCSSTransitionGroup>
        </div>
        <div className='wizard-footer'>
          <div style={this.props.showNavigation ? {} : { display: 'none' }}>
            <UiWizardControls
              buttonAttribs={{
                left: {
                  handleChange: this.previous,
                  disabled: previousDisabled || !(this.showPrevious(this.state.compState))
                },
                cancel: {
                  handleChange: this.props.cancel
                },
                right: {
                  handleChange: () => this.next(currentStep),
                  disabled: nextDisabled || !(this.showNext(this.state.compState))
                }
              }}
            />
          </div>
        </div>
      </div>
    );
  },

  renderSteps() {
    const steps = _.map(this.props.steps, (step) => ({ name: step.name, overrideView: step.overrideView, customStyle: step.customStyle }));
    return <UiProgressMeter
      steps={steps}
      currentPosition={this.state.compState} />;
  }
});

export default UiWizard;

export { docs };
