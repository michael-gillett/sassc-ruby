/*
 * Props:
 *  title: string or arbitrary jsx
 *  color: string (defaults to 'gray')
 *  handleChangeDefault: function (required when one or more options does not have a "handleChange" function)
 *  options: array of strings and/or hashes
 *    - hashes of the form: { "text" (required), "value" (optional string), border" (optional bool), "handleChange" (optional function) }
 *
 *  for example:
 *    const options = [ 'a',
 *                      { text: 'b', border: true, value: 'b-value' },
 *                      { text: 'c', handleChange: x => console.log(x + ' -- custom callback') }
 *                    ];
 *    <UiDropdown title={<strong>Dropdown like it's hot</strong>} options={options} color='green' handleChangeDefault={x => console.log(x)} />
 */

 const docs = {
   title: "UiDropdown",
   propDetails: [
     { title: "title",
       required: true,
       type: "string",
       description: "The title for the Dropdown." },
     { title: "options",
       required: true,
       type: "array",
       description: "An array of strings and/or hashes - if the element is a hash it can have keys text (required string), border (optional boolean), value (optional string), and handleChange (optional function). Text is custom text for the dropdown option, border is a boolean that determines if there is a border, value is the value of the option, and handleChange is a custom handleChange for the option." },
     { title: "handleChangeDefault",
       required: false,
       type: "function",
       description: "A function to handle change - required when one or more options does not have a handleChange function." },
     { title: "color",
       required: false,
       type: "string",
       description: "The color of the dropdown - defaults to grey." }
   ]
 }


const UiDropdown = React.createClass({
  getInitialState () {
    return {
      expanded: false
    };
  },
  render () {
    const { title, options, color='gray', hideCaret, tooltipPosition='center' } = this.props;
    const containerClass = 'lr-ui-dropdown ' + color + (this.state.expanded ? ' open' : '');
    return (
      <div className={containerClass}>
        <div
          className='lr-ui-dropdown-toggle'
          tabIndex='1'
          onBlur={this.closeOnBlur}
          aria-expanded={this.state.expanded.toString()}
          onClick={this.toggleExpanded} >
            <label>{title}</label>
            {_.isEmpty(options) || hideCaret ? null : <i className='fa fa-angle-down'></i>}
          <ul className={'dropdown-menu ' + (tooltipPosition === 'left' ? 'tooltip-left ' : '') + (tooltipPosition === 'right' ? 'tooltip-right ' : '')}>
            {_.map(options, this.generateDropdownOption)}
          </ul>
        </div>
      </div>
    );
  },
  toggleExpanded () {
    if (!_.isEmpty(this.props.options)) {
      this.setState({expanded: !this.state.expanded});
    }
  },
  closeOnBlur () {
    if (this.state.expanded) {
      this.toggleExpanded()
    }
  },
  generateDropdownOption (option, index) {
    const borderStyle = option.border ? {borderBottom: 'thin solid white'} : {};
    const optionText = typeof option === 'string' ? option : option.text;
    const onMouseDown = () => {
      this.toggleExpanded();
      if (typeof option.handleChange === 'function') {
        option.handleChange(optionText, option.value);
      } else {
        this.props.handleChangeDefault(optionText, option.value);
      }
    };
    return (
      <li key={index} value={option.value || optionText} onMouseDown={onMouseDown}>
        <a style={borderStyle}>
          {optionText}
        </a>
      </li>
      );
    }
});

export default UiDropdown;

export { docs };
