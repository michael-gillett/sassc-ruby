const PaginationNavigator = React.createClass({
  render() {
    const { isFetching, initialFetchComplete, _queryParamsChanged } = this.props.metaData;
    const showLoadingSpinner = isFetching && (_queryParamsChanged || !initialFetchComplete);
    return(
      <div className="row pagination-nav">
        <ul className="pagination">
          {showLoadingSpinner ? this.getLoadingSpinner() : this.getPages()}
        </ul>
      </div>
    );
  },

  getEllipsisPage(key) {
    return (
      <li className="page ellipsis" key={key}>
        <div className="page ellipsis">
          <div className="page-ellipsis">...</div>
        </div>
      </li>
    );
  },

  getLoadingSpinner() {
    return (
      <li>
        <div className="page page-loading">
          <div className="page-num">
            <div className="loading-spinner loading-standalone">
              <i className="fa fa-fw fa-circle-o-notch fa-spin"></i>
            </div>
          </div>
        </div>
      </li>
    );
  },

  getPages() {
    const params = this.props.metaData.queryParams;
    const pages = this.preparePages();
    const pagesToShow = (
      _.map(pages, (page, i) => {
        if (page === '...') {
          return this.getEllipsisPage(i);
        } else {
          // When rendering the current page, change it's styling and make unclickable.
          let isCurrentPage = page === parseInt(params.page);
          let paramsForNewPage = _.extend({}, params, { page: page });
          return (
            <li key={i} onClick={isCurrentPage ? '' : this.props.getPage.bind(null, paramsForNewPage)}>
              <div className={isCurrentPage ? "page current-page" : "page"}>
                <div className="page-num">
                  {page}
                </div>
              </div>
            </li>
          );
        }
      })
    );
    return pagesToShow;
  },

  preparePages() {
    const params = this.props.metaData.queryParams;
    let currentPage = parseInt(params.page);
    let totalPages;
    if (!params.total_records || !params.per_page || this.props.metaData.errorFetching) {
      totalPages = 1;
      currentPage = 1;
    } else {
      totalPages = Math.ceil(parseInt(params.total_records) / parseInt(params.per_page));
    }
    var head = [],
      core = [],
      tail = [];

    if (totalPages <= 5) {
      return _.range(1, totalPages + 1);
    }

    // determine core pages
    if (currentPage === 1) {
      core = [1, 2, 3];
    } else if (currentPage === totalPages) {
      core = [totalPages - 2, totalPages - 1, totalPages];
    } else {
      core = [currentPage - 1, currentPage, currentPage + 1];
    }

    // determine head
    if (core[0] <= 1) {
      head = [];
    } else if (core[0] === 2) {
      head = [1];
    } else {
      head = [1, '...'];
    }

    // determine tail
    if (core[2] >= totalPages) {
      tail = [];
    } else if (core[2] === totalPages - 1) {
      tail = [totalPages];
    } else {
      tail = ['...', totalPages];
    }

    // join
    return head.concat(core).concat(tail);
  }
});

export default PaginationNavigator;
