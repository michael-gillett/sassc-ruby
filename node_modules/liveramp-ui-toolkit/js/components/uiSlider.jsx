require('rc-slider/assets/index.css');
var Rcslider = require('rc-slider');

const docs = {
  title: "UiSlider",
  propDetails: [
    { title: "label",
      required: true,
      type: "string",
      description: "A title for the slider." },
    { title: "steps",
      required: true,
      type: "object",
      description: "An object which maps the numbers 1 to n (length of slider) to labels (steps)." },
    { title: "value",
      required: true,
      type: "integer",
      description: "The current value of the slider." },
    { title: "handleChange",
      required: true,
      type: "function",
      description: "Handles slider change - takes in value of the step." },
    { title: "disabled",
      required: false,
      type: "boolean",
      description: "Whether or not this slider is disabled." }
  ]
}

export default function UiSlider(props) {
  // The user passes in a hash which maps the numbers 1 to n, where n is the total number of steps in the slider, to various labels
  // i.e. we create a slider of two steps, 1 maps to the choiceLabel "Individual" and 2 maps to "Household"
  //  -- {1: "Individual", 2: "Household"} --
  // The slider then can change the label beneath it dynamically when it changes value
  //

  // User provides:
  //  - a title for the slider (label) : string
  //  - an object which maps the numbers 1 to n to labels (steps) : object
  //  - the default numerical value for the slider (value) : integer
  //  - a function to handle changes that takes in the slider value (handleChange) : function
  //  - a boolean to determine whether or not the slider is disabled : boolean

  const showValue = (step) => {
    return steps[step];
  };

  const { label, steps, value, handleChange, disabled } = props;

  return (
    <div className="lr-ui-slider">
      <div className="lr-ui-slider-label">{label}</div>
      <Rcslider
        onAfterChange={handleChange}
        disabled={disabled}
        className={disabled ? 'lr-ui-slider-slider-disabled' : 'lr-ui-slider-slider'}
        defaultValue={[value]}
        min={1}
        max={Object.keys(steps).length}
        step={1}
        tipFormatter={showValue}
        >
      </Rcslider>
    </div>
  );
};

export { docs };
