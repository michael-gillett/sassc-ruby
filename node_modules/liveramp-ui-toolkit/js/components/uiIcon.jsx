import Icons from './icons.jsx';

const docs = {
  title: "UiIcon",
  propDetails: [
    { title: "icon",
      required: true,
      type: "string",
      description: "The name of the icon." },
    { title: "color",
      required: true,
      type: "string",
      description: "One of the color names supported by Kodos." },
    { title: "classes",
      required: false,
      type: "string",
      description: "array of class names or space delimited classes to apply (passed into cn())" },
    { title: "dimensions",
      required: false,
      type: "array",
      description: "The [width, height] of the SVG in pixels (eg. [40, 40]). If not provided, the UiIcon will fill the parent container automatically." },
    { title: "onClick",
      required: false,
      type: "function",
      description: "A function to be called on click. If specified, the icon has additional hover/click style elements." }
  ]
}

var iconsToSVG = {};
Icons.forEach( (icon) => {
  var iconName = icon.replace('lr-','').replace('.svg','');
  iconsToSVG[iconName] = require('../../images/' + icon);
});

export default function UiIcon(props) {
  // User must pass in:
  // - icon    : string : the icon name
  // - color   : string : one of the color names supported by ui_toolkit
  // - classes : string : array of class names or space delimited classes to apply (passed into cn())
  // User may pass in:
  // - dimensions : array    : the [width, height] of the SVG in pixels (eg. [40, 40])
  //    + if not provided, the UiIcon will fill the parent container automatically
  // - onClick    : function : handler that is fired when clicking on the icon
  //    + if specified, the icon has additional hover/click style elements

  const { icon, classes, dimensions, onClick, color} = props;
  return (
    <div
      onClick={onClick}
      className={ cn('lr-ui-icon', classes, color, { clickable: onClick }) }
      style={dimensions ? {display: 'inline-block', width: (dimensions[0] + 'px'), height: (dimensions[1] + 'px')} : null}
      dangerouslySetInnerHTML={{__html: iconsToSVG[icon]}}
    />
  );
};

export { docs };
