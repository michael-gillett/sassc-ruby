const docs = {
  title: "UiTabbedView",
  propDetails: [
    { title: "tabs",
      required: true,
      type: "array",
      description: "An array of arrays where the first element is the tab name, and the second element is the component to be rendered." },
    { title: "activeTabIndex",
      required: false,
      type: "integer",
      description: "Optional index corresponding to which tab should display." },
    { title: "handleTabChange",
      required: false,
      type: "function",
      description: "Must be provided if activeTabIndex is provided, otherwise component will throw. Receives arguments as a tuple ['tabName', TabComponent], and a tabIndex." }
  ]
}

const UiTabbedView = React.createClass({
  /* User provides:
   *    tabs: Array of arrays where:
   *       * first element of each subarray is the tab name
   *       * second element of each subarray is the component
   *    activeTabIndex: Optional index corresponding to which tab should display
   *    handleTabChange: Receives as arguments a tuple of the form ['tabName', TabComponent], and a tabIndex
   *     If activeTabIndex is provided but handleTabChange is not, then the component will throw. Otherwise, the callback is optional.
   */
  getInitialState () {
    return this.tabIndexProvided() ? {} : {activeTab: this.props.tabs[0]};
  },

  render() {
    if (this.tabIndexProvided() && !_.isFunction(this.props.handleTabChange)) {
      throw new Error('handleTabChange prop must be of type function if activeTabIndex is provided to UiTabbedView');
    }
    return (
      <div className='lr-ui-tabbed-view'>
        {this.generateTabs()}
        {this.getActiveTab()[1]}
      </div>
    )
  },

  activateTab(tab, tabIndex) {
    const activeTab = this.getActiveTab();
    if (activeTab[0] !== tab[0] && _.isFunction(this.props.handleTabChange)) {
      this.props.handleTabChange(tab, tabIndex);
    }
    if (!this.tabIndexProvided()) {
      this.setState({activeTab: tab})
    }
  },

  generateTabs() {
    const activeTab = this.getActiveTab();
    return (
      <div className='lr-ui-tabbed-view-tabs'>
        <ul className='nav nav-tabs nav-justified'>
        {_.map(this.props.tabs, (tab, tabIndex) => {
          const tabClassName = tab[0] === activeTab[0] ? 'lr-ui-tabbed-view-tab active' : 'lr-ui-tabbed-view-tab inactive';
          return (
            <li key={tab[0]} className={tabClassName} onClick={() => {this.activateTab(tab, tabIndex)}}>
              <div className='lr-ui-tabbed-view-tab-text'>{tab[0]}</div>
            </li>
          )
        })}
        </ul>
      </div>
    );
  },

  getActiveTab () {
    return this.tabIndexProvided() ? this.props.tabs[this.props.activeTabIndex] : this.state.activeTab;
  },

  tabIndexProvided () {
    return !_.isUndefined(this.props.activeTabIndex);
  }
});

export default UiTabbedView;

export { docs };
