import ParentRowWrapper from 'components/parentChildComponent/parentRowWrapper';
import PaginationNavigator from 'components/paginationNavigator';
import HeaderWrapper from 'components/parentChildComponent/headerWrapper';
import DetailView from 'components/parentChildComponent/detailView';
import UiLoadingComponent from 'components/uiLoadingComponent.jsx';

const ParentChildComponent = React.createClass({
  getInitialState() {
    return { showDetailView: false, detailViewId: -1 };
  },

  render() {
    // List of top level rows
    const parents = this.props.parents;
    const { initialFetchComplete, errorFetching, isFetching } = this.props.parentsMetaData;
    if (_.any([initialFetchComplete, errorFetching, isFetching ], (prop) => typeof prop === 'undefined')) {
      console.warn("All fetching statuses should be defined.");
    }
    const empty = parents.length === 0;

    // parent row configs
    const ParentRow = this.props.ParentRow; // Model for top level row
    const parentRowProps = this.props.parentRowProps || {}; // Props to be passed into ParentRow
    parentRowProps.openDetailView = this.openDetailView;
    const parentWrapperOptions = this.props.parentWrapperOptions || {}; //showChildren, showCheckboxes
    const parentContainerProps = this.props.parentContainerProps || {};

    // children / childrenRow configs
    const ChildRow = this.props.ChildRow; // Model for child rows
    const childRowProps = this.props.childRowProps || {};
    const childWrapperOptions = this.props.childWrapperOptions || {}; // showCheckboxes
    const childContainerProps = this.props.childContainerProps || {};
    const childrenPreloaded = this.props.childrenPreloaded || {}; // Boolean, true if requires a separate request from the parents

    const Header = this.props.Header;
    const headerWrapperOptions = this.props.headerWrapperOptions || {};
    const headerOptions = this.props.headerOptions || {};

    const fetchingErrorText = parentContainerProps.fetchingErrorText || "Loading error.";
    const emptyText = parentContainerProps.emptyText || "No items to display.";

    let bodyText = "";
    if (!initialFetchComplete || isFetching) {
      bodyText = (
        <UiLoadingComponent />
      );
    } else if (errorFetching) {
      bodyText = (
        <UiLoadingComponent message={fetchingErrorText} type="error" />
      );
    } else if (empty) {
      bodyText = (
        <UiLoadingComponent message={emptyText} type="error" />
      );
    } else {
      bodyText = (
        <div className={this.props.componentClass || ""}>
          {
            _.map(parents, (parent, i) => {
              return <ParentRowWrapper
                key={i}
                parent={parent}
                ParentRow={ParentRow}
                parentRowProps={parentRowProps}
                childContainerProps={childContainerProps}
                childrenPreloaded={childrenPreloaded}
                ChildRow={ChildRow}
                childWrapperOptions={childWrapperOptions}
                childRowProps={childRowProps}
                {...parentWrapperOptions}
                // Using ES6 rest parameters to make parentWrapperOptions props individually available to parentRowWrapper
              />;
            })
          }
        </div>
      );
    }
    return (
      <div className="row">
        <div className={this.state.showDetailView ? "col-xs-8" : "col-xs-12"}>
          <HeaderWrapper Header={Header} headerOptions={headerOptions} {...headerWrapperOptions} />
          {bodyText}
          {this.props.pagination ? <PaginationNavigator {...this.props.paginationOptions} /> : null}
        </div>
        {this.state.showDetailView ? this.getDetailView() : null}
      </div>
    );
  },

  openDetailView(id) {
    this.setState({ showDetailView: true, detailViewId: id });
  },

  closeDetailView() {
    this.setState({ showDetailView: false, detailViewId: -1 });
  },

  getDetailView() {
    const { allModels, title, fetchModel, childComponents } = this.props.detailViewOptions;
    const detailModel = allModels[this.state.detailViewId];
    let titleText;
    if (typeof title === 'function') {
      titleText = title(detailModel);
    } else {
      titleText = title + " " + detailModel.id;
    }
    return (
      <div className="detail-view-container col-xs-4">
        <DetailView
          title={titleText}
          model={detailModel}
          closeDetailView={this.closeDetailView}
          fetchModel={fetchModel}
          childComponents={childComponents}
        />
      </div>
    );
  }
});

export default ParentChildComponent;
