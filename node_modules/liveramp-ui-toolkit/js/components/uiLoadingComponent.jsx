import UiIcon from './uiIcon.jsx';

const docs = {
  title: "UiLoadingComponent",
  propDetails: [
    { title: "type",
      required: true,
      type: "string",
      description: "The type of the loading component - can be one of ['loading', 'small', 'success', 'error']. The small spinner is the only one that reserves space in the flow regardless of whether it is showing or not." },
    { title: "show",
      required: false,
      type: "boolean",
      description: "Only applies to the small spinner. Whether or not to show the spinner." },
    { title: "message",
      required: false,
      type: "string",
      description: "An optional message to display." },
    { title: "retryCallback",
      required: false,
      type: "function",
      description: "An optional function to call when the error component is clicked on." }
  ]
}

// User must pass in:
// type : string : The type of the loading component - can be one of ['loading', 'small', 'success', 'error']. The small spinner is the only one that reserves space in the flow regardless of whether it is showing or not.
// User may pass in:
// message       : string   : An optional message to display.
// show          : boolean  : Only applies to the small spinner. Whether or not to show the spinner.
// retryCallback : function : An optional function to call when the error component is clicked on.

const UiLoadingComponent = React.createClass({

  getDefaultProps() {
    return {
      type: 'loading',
      message: '',
      show: false,
      retryCallback: function() {
        console.warn("No retry callback specified")
      }
    };
  },

  render() {
    return (
      this.generateComponent(this.props.type)
    )
  },

  generateComponent(type){
    switch (type) {
      // Loading spinners should be rendered in place of the HTML element being loaded
      case 'loading':
        return this.generateSpinner();

      // Small spinners should be rendered adjacent to the HTML element being loaded at all times.
      // Visibility is set with the 'show' prop
      case 'small':
        return this.generateSmallSpinner();

      // Success spinners should be rendered in place of the HTML element that succeeded
      // The message prop will display below the icon
      case 'success':
        return this.generateSuccess();

      // Error icons should be rendered in place of the HTML element that failed
      // The message prop will display below the icon
      case 'error':
        return this.generateError();

      default:
        console.error("Loading Spinner Error: invalid type " + this.props.type.to_s + ". Valid types are loading, small, success, and error.");
        return null;
    }
  },

  // Will cover the entire parent element with the loading spinner.
  // Parent element must have a non-static position.
  // Parent element must not go below 100px in height
  generateSpinner() {
    return (
      <div
        className="ls-spinner-div"
      >
        <div className="ls-center">
          <div className='ls-spinner'>
            <UiIcon icon='logo' classes='absolute ls-logo' dimensions={[107, 107]}/>
            <UiIcon icon='dashed-ring' classes='absolute ls-spin' dimensions={[107, 107]}/>
          </div>
          <div className="ls-message" >{this.props.message}</div>
        </div>
      </div>
    );
  },

  // Will place a 30px square in flow, which can be shown by setting the show prop to true.
  generateSmallSpinner() {
    if (this.props.show) {
      return (
        <div className="ls-small-spinner-div" >
          <UiIcon icon='small-dashed-ring' classes='ls-small-spinner ls-spin' />
        </div>
      );
    } else {
      return (
        <div className="ls-small-spinner-div" />
      );
    }
  },

  // Will cover the entire parent element with the success icon and message.
  // Parent element must have a non-static position.
  // Parent element must not go below 100px in height
  generateSuccess() {
    return (
      <div
        className="ls-spinner-div"
      >
        <div className="ls-center">
          <UiIcon icon='success' classes='ls-error-icon' color='base-green'/>
          <div className="ls-success">{this.props.message}</div>
        </div>
      </div>
    );
  },

  // Will cover the entire parent element with the error icon and message.
  // The user can click on the error message to hit the function in the retryCallback prop
  // Parent element must have a non-static position.
  // Parent element must not go below 100px in height
  generateError() {
    return (
      <div
        className="ls-spinner-div"
      >
        <div className="ls-center">
          <UiIcon icon='error' color='base-green' classes='ls-error-icon' onClick={this.props.retryCallback}/>
          <div className="ls-error" onClick={this.props.retryCallback}>{this.props.message}</div>
        </div>
      </div>
    );
  }
});

export default UiLoadingComponent;

export { docs };
