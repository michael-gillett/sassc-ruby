import UiSelect from './uiSelect.jsx';
import UiSwitch from '../components/uiSwitch.jsx';

const docs = {
  title: "UiLabel",
  propDetails: [
    { title: "label",
      required: true,
      type: "string",
      description: "The label." },
    { title: "showSwitch",
      required: false,
      type: "boolean",
      description: "Whether or not there should be a switch." },
    { title: "showSelect",
      required: false,
      type: "boolean",
      description: "Whether or not a select should be shown." },
    { title: "labelSelectOptions",
      required: false,
      type: "object",
      description: "Options for the select field, in a similar format as the options in UiFilterGroup. The option should consist of a name, selectOptions, isMulti, selected, and allowCreate." },
    { title: "handleSelectChange",
      required: false,
      type: "function",
      description: "Handles change to the select field." },
    { title: "handleSwitchChange",
      required: false,
      type: "function",
      description: "Handles change to the switch." }
  ]
}

export default function UiLabel(props) {
  // user should pass in:
  // - a label (label) : string
  // - a boolean to determine whether or not there should be a switch (showSwitch) : boolean
  // - whether switch should default to on or off (switchOn) : boolean
  // - optional boolean for whether or not a select should be shown (showSelect) : boolean
  // - options for the select field, in a similar format as the uiSelect inputs in uiFilterGroup (labelSelectOptions) : object
  //      - name: the filter's unique name, to be used as placeholder text
  //      - selectOptions: a list of option hashes, formatted like [ { label: 'Option1', value: 1 }, { ... } ]
  //      - isMulti: a boolean that determines if the input is a multi-select
  //      - selected: a value, or list of values, that are selected
  //      - allowCreate: an optional boolean which determines if the user can create options within the group
  // - a function that handles changes to the select field in the parent component (handleSelectChange) : function
  // - a function that changes the switch state in the parent component (handleSwitchChange) : function

  const { label, showSwitch, switchOn, showSelect, labelSelectOptions, handleSelectChange, handleSwitchChange } = props;

  const selectComponent =  showSelect ? (
    <div className="lr-ui-label-select">
      <UiSelect
        placeholder={labelSelectOptions.name}
        selectOptions={labelSelectOptions.selectOptions}
        isMulti={labelSelectOptions.isMulti}
        selected={labelSelectOptions.selected}
        handleChange={handleSelectChange}
        allowCreate={labelSelectOptions.allowCreate}
        clearable={false}
        />
    </div>
  ) : null;

  const getSwitch = () => {
    return (
    <UiSwitch
      switchOn={switchOn}
      handleChange={handleSwitchChange}
      />
    );
  };

  return (
    <div className="lr-ui-label">
      <div className="lr-ui-label-label">
        {label}
      </div>
      {showSelect ? selectComponent : null}
      {showSwitch ? getSwitch() : null}
    </div>
  );
};

export { docs };
