import UiSelect from 'components/uiSelect';
import UiIcon from './uiIcon.jsx';

const docs = {
  title: "UiFilterGroup",
  propDetails: [
    { title: "filterParams",
      required: true,
      type: "array",
      description: "An array of objects which have the keys : name(used as placeholder text and also as a key for the select), selectOptions (same as UiSelect), isMulti (boolean - determines if multi-select), allowCreate (boolean - allows creation of options), arrowOnHover (boolean - shows arrow only on hover), label (optional label for the select), placeholder (a placeholder)." },
    { title: "handleChange",
      required: true,
      type: "function",
      description: "Handles change events to the filter group. Receives isMulti, name, and selected - should update parent component's state. The function should be able to handle the cases for selected outlined in UiSelect." },
    { title: "handleClearAll",
      required: false,
      type: "function",
      description: "An optional function that handles a click of the clear all button." },
    { title: "hideClearAll",
      required: false,
      type: "boolean",
      description: "Whether or not to hide the clear all button." }
  ]
}

export default function UiFilterGroup(props) {
  // user should pass in:
  // - a list of filter hashes (filterParams). Each filter hash should have the following keys:
  //      - name: the filter's unique name, to be used as placeholder text if no placeholder is passed and as a key to look up this filter within the group
  //      - selectOptions: a list of option hashes, formatted like [ { label: 'Option1', value: 1 }, { ... } ]
  //      - isMulti: a boolean that determines if the input is a multi-select
  //      - selected: a value, or list of values, that are selected
  //      - allowCreate: an optional boolean which determines if the user can create options within the group
  //      - arrowOnHover: an optional boolean which determines if the arrow for the dropdown appears on hover
  //      - label: an optional label for the select
  //      - placeholder: an optional placeholder for the select. the name will be used if no placeholder is passed
  // - handleChange: a function that receives isMulti, name, and selected to update the parent on change
  //    + The function should be able to handle four types of arguments for selected:
  //       -- an empty string when no values are selected
  //       -- a string that represents the value selected when one value is selected
  //       -- if multi-select, and multiple values are selected, the function will receive a string consisting of the selected values separated by commas
  //           ++ if allowCreate is true, then this string will have a string value at the end for the 'value' of the newly created value
  // - handleClearAll: an optional function that handles a click of the clear all button
  // - hideClearAll: an optional boolean to hide the clear all button

  const { filterParams, handleChange, handleClearAll, hideClearAll } = props;

  const filters = _.map(filterParams, (filter) => {
    return (
      <div className="lr-ui-filter" key={filter.name}>
        <UiSelect
          placeholder={filter.placeholder ? filter.placeholder : filter.name}
          label={filter.label}
          selectOptions={filter.selectOptions}
          isMulti={filter.isMulti}
          selected={filter.selected}
          handleChange={handleChange.bind(null, filter.isMulti, filter.name)}
          allowCreate={filter.allowCreate}
          arrowOnHover={filter.arrowOnHover}
          disabled={filter.disabled}
          clearable={false}
          />
      </div>
    );
  });

  const clearFilters = () => {
    if (handleClearAll) {
      handleClearAll();
    } else {
      _.each(filterParams, (filter) => {
        handleChange(filter.isMulti, filter.name, "");
      });
    }
  };

  const clearButton = (
    <div className="lr-ui-filter lr-ui-filter-group-clear-button" onClick={clearFilters}>
      <span>Clear</span>
      <UiIcon
        icon={'cancel'}
        color="header-gray"
        dimensions={[10, 10]}
      />
    </div>
  );

  return (
    <div className="lr-ui-filter-group">
      {filters}
      {hideClearAll ? null : clearButton}
    </div>
  );

};

export { docs };
