import UiFileUploadStatus from 'components/uiFileUploadStatus';
import UiProgressMeter from 'components/uiProgressMeter';

const UiProgressMeterSandbox = React.createClass({
  getInitialState() {
    var customComponent = <UiFileUploadStatus
      progress={this.state ? this.state.progress : 0}
      text="2"
      name="File Upload"
      doing={true}
    />;

     return({
       progress: 0,
      curStep: 0,
      steps: [
        {name: "Create Source"},
        {name: "Upload File", overrideView: customComponent, customStyle:{color: "#2492F2", paddingLeft: "13px"}},
        {name: "Confirm Headers"},
        {name: "Map Identifiers"},
        {name: "Map to an Audience"},
        {name: "Finished!"}
      ]
     })
   },

  componentWillMount() {
    setInterval(function() {
      if (this.state.progress < 100) {
        this.setState({progress: this.state.progress + 1})
      } else {
        setTimeout(function() {
          this.setState({progress: 0})
        }.bind(this), 3000);
      }
    }.bind(this), 100);
  },
  nextStep () {
    let curStep = this.state.curStep;
    curStep = curStep < this.state.steps.length ? curStep + 1 : curStep;
    this.setState({curStep: curStep})
  },

  prevStep () {
    let curStep = this.state.curStep;
    curStep = curStep > 0 ? curStep - 1 : curStep;
    this.setState({curStep: curStep})
  },

  render() {
    var progressMeterSteps = this.state.steps;

  return (
    <div>
      <br/> <br/> <br/>
      <div>
        <button className="button success sandbox-prev" onClick={this.prevStep}>Prev</button>
        <button className="button success sandbox-next" onClick={this.nextStep}>Next</button>
      </div>
      <br/>
      <UiProgressMeter
      steps={progressMeterSteps}
      currentPosition={this.state.curStep}
      />
    </div>
    )
  },

});

export default UiProgressMeterSandbox;
