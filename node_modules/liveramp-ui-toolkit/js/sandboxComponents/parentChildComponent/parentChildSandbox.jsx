import ParentChildComponent from 'components/parentChildComponent/parentChildComponent';
import SandboxSegment from 'sandboxComponents/parentChildComponent/sandboxSegment';
import SandboxSegmentHeader from 'sandboxComponents/parentChildComponent/sandboxSegmentHeader';
import SandboxSegmentDescription from 'sandboxComponents/parentChildComponent/sandboxSegmentDescription';

const ParentChildComponentSandbox = React.createClass({

  getInitialState() {
    return {
      sandboxSegments: {
        sandboxSegments: {
          1: {
            id: 1,
            name: 'cat',
            type: 'string',
            description: 'cats cats cats cats cats cats.'
          },
          2: {
            id: 2,
            name: 'dog',
            type: 'string',
            description: 'dogs dogs dogs'
          },
          3: {
            id: 3,
            name: 'bird',
            type: 'string',
            description: 'birds birds birds'
          }
        },
        sandboxEnabledIds: [1,3],
        sandboxAllCheckboxChecked: false,
        metaData: {
          initialFetchComplete: true,
          isFetching: false,
          errorFetching: false,
          queryParams: {
            sorted_by: { name: 'asc' }
          }
        }
      }
    };
  },

  render() {
    const sandboxSegments = this.state.sandboxSegments;

    const headerWrapperOptions = {
      showAllCheckbox: true,
      allCheckboxOptions: {
        allCheckboxId: 'all-checkbox-sandbox-input',
        checked: sandboxSegments.sandboxAllCheckboxChecked,
        allCheckboxChanged: this.allCheckboxChanged
      },
      queryParams: sandboxSegments.metaData.queryParams,
      updateQueryParams: this.updateSandboxSegmentsQueryParams,
      showSelectAllByFilters: sandboxSegments.sandboxAllCheckboxChecked
    };

    const headerOptions = {
      sandboxSegments: sandboxSegments,
      updateSandboxSegmentsQueryParams: this.updateSandboxSegmentsQueryParams,
      allCheckboxChanged: this.allCheckboxChanged,
      showQueryCount: true
    };

    const parentComponentConfigs = {
      fetchingText: "Fetching Sandbox segments...",
      fetchingErrorText: "There was an error loading the Sandbox. Please try again later.",
      emptyText: "No segments found."
    };

    const parentWrapperOptions = {
      showCheckboxes: true,
      showChildren: false,
      extraClasses: 'sandbox-segment-row',
      onChangeChecked: this.sandboxSegmentChecked,
      checkedKey: 'sandboxChecked'
    };

    const paginationOptions = {
      getPage: this.getPage,
      metaData: sandboxSegments.metaData
    };

    const detailViewOptions = {
      allModels: sandboxSegments.sandboxSegments,
      title: this.getDetailViewTitle,
      fetchModel: this.fetchSandboxSegment,
      childComponents: [SandboxSegmentDescription]
    };

    const sandboxSegmentsToShow = _.map(sandboxSegments.sandboxEnabledIds, (id) => {
      return sandboxSegments.sandboxSegments[id];
    });

    return (
      <div>
        <ParentChildComponent
          componentClass="sandbox-list"

          parents={sandboxSegmentsToShow}
          parentsMetaData={sandboxSegments.metaData}

          Header={SandboxSegmentHeader}
          headerWrapperOptions={headerWrapperOptions}
          headerOptions={headerOptions}

          parentComponentConfigs={parentComponentConfigs}
          parentWrapperOptions={parentWrapperOptions}
          ParentRow={SandboxSegment}

          detailView={true}
          detailViewOptions={detailViewOptions}

          pagination={true}
          paginationOptions={paginationOptions}
        />
      </div>
    );
  },

  allCheckboxChanged(e) {
    this.updateSandboxSegmentsQueryParams({ select_all_filtered: false }); // It's easier to handle this here than as a side effect of actions
    this.setState(update(this.state, { sandboxSegments: { sandboxAllCheckboxChecked: { $set: e.currentTarget.checked } } }));
  },

  sandboxSegmentChecked(e) {
    console.log('issued fake segment check with value:');
    console.log(parseInt(e.currentTarget.value));
  },

  getPage(params) {
    this.updateSandboxSegmentsQueryParams({ page: params['page'] });
    this.fetchSandboxSegments();
  },

  fetchSandboxSegment(id) {
    console.log('issued fake single segment fetch with id:');
    console.log(id);
    const segments = this.state.sandboxSegments.sandboxSegments;
    const segment = segments[id];
    segment.isFetching = false;
    this.setState(update(this.state, { sandboxSegments: { sandboxSegments: { $set : segments } } }));
  },

  fetchSandboxSegments() {
    console.log('issued fake segments fetch');
  },

  updateSandboxSegmentsQueryParams(params) {
    console.log('issued fake update with params:');
    console.log(params);
  },

  getDetailViewTitle(segment) {
    const cutoff = segment.name.lastIndexOf(">");
    if (cutoff !== -1) {
      return segment.name.slice(cutoff + 2);
    } else {
      return segment.name;
    }
  },


});

export default ParentChildComponentSandbox;
