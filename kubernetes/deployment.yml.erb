---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: default
  name: go-links
  labels:
    app: go-links
spec:
  template:
    metadata:
      labels:
        app: go-links
    spec:
      containers:
      - name: go-links
        image: <%= "#{config['image_registry']}/go-links:#{config['image_tag']}" %>
        imagePullPolicy: <%= "#{config['pull_policy']}" %>
        resources:
          limits:
            memory: 256Mi
            cpu: 500m
        ports:
        - name: app-server-port
          containerPort: 3000
        env:
        - name: RAILS_ENV
          value: production
        - name: GO_LINKS_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: go-links--go-links-db-creds
              key: url
        readinessProbe:
          httpGet:
            path: /liveramp_health_check
            port: app-server-port
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
        livenessProbe:
          httpGet:
            path: /liveramp_health_check
            port: app-server-port
          initialDelaySeconds: 45
          periodSeconds: 20
          timeoutSeconds: 3
      <% unless config['target'] == 'local' %>
      - name: cloudsql-proxy
        image: "gcr.io/cloudsql-docker/gce-proxy:1.13"
        command: ["/cloud_sql_proxy",
                  "-instances=<%= config['cloudsql_instance_name'] %>=tcp:<%= config['cloudsql_port'] %>",
                  "-credential_file=/secrets/cloudsql/key.json",
                  # This timeout matches the terminationGracePeriod for pods. Without this, the cloudsql_proxy will shut down
                  # immediately on SIGTERM, while the application will continue finishing out any currrent requests, meaning
                  # the app will be trying to talk to a dead cloudsql proxy.
                  "-term_timeout=30s"]
        # [START cloudsql_security_context]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        # [END cloudsql_security_context]
        volumeMounts:
          - name: cloudsql-instance-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
      # [END proxy_container]
      <% end %>
      <% unless config['target'] == 'local' %>
      # [START volumes]
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: go-links--cloudsql-instance-credentials
      # [END volumes]
      <% end %>
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0 # For single replica
      maxSurge: 1
  replicas: <%= config['environment'] == 'prod' ? 3 : 1 %>
